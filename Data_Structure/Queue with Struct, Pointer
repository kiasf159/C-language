#include <stdio.h>
#include <stdlib.h>

typedef int Element;
typedef struct LinkedNode {
	Element data;
	struct LinkedNode* link;
}Node;
Node* front = NULL;
Node* rear = NULL;

void error(char str[])
{
	fprintf(stderr, "%s\n", str);
	exit(1);
}
Element is_empty()
{
	return front == NULL;
}

void init_queue()
{
	front = rear = NULL;
}
Element size()
{
	Node *p;
	int count = 0;
	for (p = front; p != NULL; p = p->link)
		count++;
	return count;
}

void enqueue(Element e)
{
	Node *p = (Node *)malloc(sizeof(Node));
	p->data = e;
	p->link = NULL;
	if (is_empty())
		front = rear = p;
	else
	{
		rear->link = p;
		rear = p;
	}
}

Element dequeue()
{
	Node *p;
	Element e;
	if (is_empty())
		error("The Queue is Empty!\n");
	p = front;
	front = front->link;
	if (front == NULL)
		rear = NULL;
	e = p->data;
	free(p);
	return e;
}

Element peek()
{
	if (is_empty())
		error("The Queue is Empty!\n");
	return front->data;
}
void destroy_queue()
{
	while (is_empty() == 0)
		dequeue();
}

void print_queue(char msg[])
{
	Node *p;
	printf("%s[%2d]= ", msg, size());
	for (p = front; p != NULL; p = p->link)
	{
		printf("%2d ", p->data);
	}
	printf("\n");
}

void main()
{
	int temp = 0;
	int enqueue_number = 0;
	int dequeue_number = 0;
	int i;
	init_queue();
	printf("How much to put in : ");
	scanf_s("%d", &enqueue_number);
	for (i = 1; i <= enqueue_number; i++)
	{
		printf("Input Number : ");
		scanf_s("%d", &temp);
		enqueue(temp);
	}
	print_queue("Enqueue Result : ");
	printf("How much to pull out : ");
	scanf_s("%d", &dequeue_number);
	for (i = 1; i <= dequeue_number; i++)
	{
		printf("\tDequeue(delete) : %d\n", dequeue());
	}
	print_queue("Dequeue Result :");
	destroy_queue();
	print_queue("Destroy Result :");
}
