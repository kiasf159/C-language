#include <stdio.h>
#include <stdlib.h>

typedef int Element;
typedef struct LinkedNode {
	Element data;
	struct LinkedNode* link; //Next Node Pointer variable
}Node;
Node* top = NULL; //head pointer

void error(char str[])
{
	fprintf(stderr, "%s\n", str);
	exit(1);
}

int is_empty()
{
	return top == NULL;
}
void init_stack()
{
	top = NULL;
}
int size()
{
	Node *p;
	int count = 0;
	for (p = top; p != NULL; p = p->link)
		count++;
	return count;
}
void push(Element e) 
{
	Node *p = (Node*)malloc(sizeof(Node));
	p->data = e; //Reset Data Field

	p->link = top;
	top = p;
}
Element pop()
{
	Node *p;
	Element e;
	if (is_empty())
		error("The Stack is Empty!\n");
	p = top;
	top = p->link;
	e = p->data;
	free(p);
	return e;
}
Element peek()
{
	if (is_empty())
		error("The Stack is Empty!\n");
	return top->data;
}

void destroy_stack()
{
	while (is_empty() == 0)
		pop();
}

void print_stack(char msg[])
{
	Node *p;
	printf("%s[%2d]= ", msg, size());
	for (p = top; p != NULL; p = p->link)
		printf("%2d ", p->data);
	printf("\n");
}

void main()
{
	int temp = 0;
	int push_number = 0;
	int pop_number = 0;
	int i;
	init_stack();
	printf("How much to put in : ");
	scanf_s("%d", &push_number);
	for (i = 1; i <= push_number; i++)
	{
		printf("Input Number : ");
		scanf_s("%d", &temp);
		push(temp);
	}
	print_stack("Stack push result :");
	printf("How much to pull out : ");
	scanf_s("%d", &pop_number);
	for (i = 1; i <= pop_number; i++)
	{
		printf("\tpop(delete) : %d\n", pop());
	}
	print_stack("Stack pop result :");
	destroy_stack();
}
