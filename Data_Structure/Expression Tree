#include <stdio.h>
#include <stdlib.h>

typedef int TElement;
typedef struct BinTrNode {
	TElement data;
	struct BinTrNode* left;
	struct BinTrNode* right;
}TNode;
TNode* root;

void init_tree() { root = NULL; }
int is_empty_tree() { return root == NULL; }
TNode* get_root() { return root; }

TNode* create_tree(TElement val, TNode* l, TNode* r)
{
	TNode* n = (TNode*)malloc(sizeof(TNode));
	n->data = val;
	n->left = l;
	n->right = r;
	return n;
}

void preorder(TNode *n)
{
	if (n != NULL)
	{
		printf("[%c] ", n->data);
		preorder(n->left);
		preorder(n->right);
	}
}

void inorder(TNode *n)
{
	if (n != NULL)
	{
		inorder(n->left);
		printf("[%c] ", n->data);
		inorder(n->right);
	}
}

void postorder(TNode *n)
{
	if (n != NULL)
	{
		postorder(n->left);
		postorder(n->right);
		printf("[%c] ", n->data);
	}
}

int count_node(TNode *n)
{
	if (n == NULL)
		return 0;
	return 1 + count_node(n->left) + count_node(n->right);
}

int count_leaf(TNode *n)
{
	if (n == NULL)
		return 0;
	if (n->left == NULL && n->right == NULL)
		return 1;
	else return count_leaf(n->left) + count_leaf(n->right);
}

int calc_height(TNode *n)
{
	int hLeft, hRight;
	if (n == NULL)
		return 0;
	hLeft = calc_height(n->left);
	hRight = calc_height(n->right);
	return (hLeft > hRight) ? hLeft + 1 : hRight + 1;
}

int evaluate(TNode *n)
{
	int op1, op2;
	if (n == NULL) return 0;
	if (n->left == NULL && n->right == NULL) return n->data;
	else
	{
		op1 = evaluate(n->left);
		op2 = evaluate(n->right);
		switch (n->data)
		{
		case '+': return op1 + op2;
		case '-': return op1 - op2;
		case '*': return op1 * op2;
		case '/': return op1 / op2;
		}
	}
	return 0;
}

void main()
{
	TNode *n1, *n2, *n3, *n4, *n5, *n6;

	n1 = create_tree(4, NULL, NULL);
	n2 = create_tree(2, NULL, NULL);
	n3 = create_tree('*', n1, n2);
	n4 = create_tree(8, NULL, NULL);
	n5 = create_tree(6, NULL, NULL);
	n6 = create_tree('-', n4, n5);
	root = create_tree('+', n3, n6);
	printf("Calculation Result : %d\n", evaluate(root));
}
