// 대학생 개인정보
#include "pch.h"
#include <iostream>
#include <cstring>
#pragma warning(disable:4996)
using namespace std;

class Person
{
private:
	int age;
	char name[50];
public:
	Person(int my_age, const char *my_name)
		: age(my_age)
	{
		strcpy(name, my_name);
	}
	void What_your_name() const
	{
		cout << "My name is " << name << endl;
	}
	void How_old_are_you() const
	{
		cout << "I'm " << age << " years old." << endl;
	}
};

class UnivStudent : public Person
{
private:
	char major[50];
public:
	UnivStudent(const char *my_name, int my_age, const char *my_major)
		:Person(my_age, my_name)
	{
		strcpy(major, my_major);
	}
	void Who_are_you() const
	{
		What_your_name();
		How_old_are_you();
		cout << "My major is " << major << endl << endl;
	}
};

int main()
{
	UnivStudent univ("Williams", 22, "Computer Eng.");
	univ.Who_are_you();

	UnivStudent univ2("Daniel", 24, "Economics");
	univ2.Who_are_you();
}

//유도 클래스(Derived Class)의 객체 생성과정 - 자식 클래스의 초기값을 부르면 부모 클래스 초기값이 먼저 나온다!
#include "pch.h"
#include <iostream>
#include <cstring>
#pragma warning(disable:4996)
using namespace std;

class SoBase
{
private:
	int baseNum;
public:
	SoBase()
		:baseNum(20)
	{
		cout << "call SoBase()" << endl;
	}
	SoBase(int n)
		:baseNum(n)
	{
		cout << "call SoBase(int n)" << endl;
	}
	void ShowBaseData()
	{
		cout << baseNum << endl;
	}
};

class SoDerived : public SoBase
{
private:
	int derivNum;
public:
	SoDerived()
		: derivNum(30)
	{
		cout << "call SoDerived()" << endl;
	}
	SoDerived(int n)
		: derivNum(n)
	{
		cout << "call SoDerived(int n)" << endl;
	}
	SoDerived(int n1, int n2)
		: SoBase(n1), derivNum(n2)
	{
		cout << "call SoDerived(int n1, int n2)" << endl;
	}
	void ShowDerivData()
	{
		ShowBaseData();
		cout << derivNum << endl;
	}
};

int main()
{
	cout << "Case 1" << endl;
	SoDerived d1;
	d1.ShowDerivData();
	cout << "Case 2" << endl;
	SoDerived d2(12);
	d2.ShowDerivData();
	cout << "Case 3" << endl;
	SoDerived d3(23, 24);
	d3.ShowDerivData();
}

//상속 + 생성자 + 소멸자 구성
#include "pch.h"
#include <iostream>
#include <cstring>
#pragma warning(disable:4996)
using namespace std;

class MyFriendInfo
{
private:
	char *name;
	int age;
public:
	MyFriendInfo(const char *name, int age)
		: age(age)
	{
		this->name = new char[strlen(name) + 1];
		strcpy(this->name, name);
	}
	void ShowMyFriendInfo()
	{
		cout << "이름 : " << name << endl;
		cout << "나이 : " << age << endl;
	}
	~MyFriendInfo()
	{
		delete[]this->name;
	}

};

class MyFriendDetailInfo : public MyFriendInfo
{
private:
	char *addr;
	char *phone;
public:
	MyFriendDetailInfo(const char *name, int age, const char *addr, const char *phone)
		: MyFriendInfo(name, age)
	{
		this->addr = new char[strlen(addr) + 1];
		this->phone = new char[strlen(phone) + 1];
		strcpy(this->addr, addr);
		strcpy(this->phone, phone);
	}
	void ShowMyDetailfriendInfo()
	{
		ShowMyFriendInfo();
		cout << "주소 : " << addr << endl;
		cout << "전화 : " << phone << endl;
	}
	~MyFriendDetailInfo()
	{
		delete[]this->addr;
		delete[]this->phone;
	}
};

int main()
{
	MyFriendDetailInfo info("Kai", 22, "Seoul", "7477");
	info.ShowMyDetailfriendInfo();
}

//private, protected, public 상속의 차이
#include "pch.h"
#include <iostream>
#include <cstring>
#pragma warning(disable:4996)
using namespace std;

class A
{
private:
	int a;
protected:
	int b;
public:
	int c;
};

class B : protected A
{
public:
	void Show()
	{
		cout << a; 
		cout << b;
		cout << c;
	}
};

class C : private A
{
public:
	void Show()
	{
		cout << a;
		cout << b;
		cout << c;
	}
};

int main()
{
	A classA;
	classA.a; //private 접근 불가
	classA.b; //protected 접근 불가, 단 protected는 상속된 클래스에서는 접근 가능
	classA.c;
	B classB;
	classB.a; //private
	classB.b; //protected
	classB.c; //protected = 상속이 protected로 됐기 때문
	C classC;
	classC.a; //private
	classC.b; //private
	classC.c; //private
}
